@startuml diagram_servicio_mensajeria_event_driven
title Servicio de Mensajería - Event Driven

!define SOLID

package "Eventos" {
  class "MessageSent" {
    +messageId
    +content
    +timestamp
    +status: MessageStatus
  }

  class "MessageStatus" {
    +SENT
    +DELIVERED
    +READ
  }

  class "MessageRead" {
    +messageId
    +timestamp
  }
}

package "Microservicios" {
  class "MessagingService" {
    +triggerSendMessage()
    +processSendMessage()
    +markAsRead(messageId)
    +retrieveConversation(userId, receiverId)
    +handleRealTimeMessaging()
  }

  class "EventPublisher" {
    +publish(event: MessageSent)
    +publish(event: MessageRead)
  }

  class "MessageEventListener" {
    +onMessageReceived(event: MessageSent)
    +onMessageRead(messageId)
  }

  class "MessageStorage" {
    +save(event: MessageSent)
    +retrieveHistory(userId)
    +retrieveConversation(userId, receiverId)
    +updateStatus(messageId, status: MessageStatus)
    +paginateMessages(userId, receiverId, page)
  }

  class "NotificationService" {
    +sendNotification(message: string)
    +sendPushNotification(userId, message: string)
  }

  class "AuthService" {
    +authenticate(userId)
    +encryptMessage(message: string)
    +decryptMessage(message: string)
    +validateToken(token: string)
  }

  interface "IMessageFactory" {
    +createMessage(content, sender, receiver)
  }

  class "TextMessageFactory" {
    +createMessage(content, sender, receiver)
  }

  class "ImageMessageFactory" {
    +createMessage(content, sender, receiver)
  }

  class "VideoMessageFactory" {
    +createMessage(content, sender, receiver)
  }

  class "AudioMessageFactory" {
    +createMessage(content, sender, receiver)
  }

  class "FileStorageService" {
    +uploadFile(file)
    +retrieveFile(fileId)
  }

  MessagingService --> EventPublisher : "Publica Evento"
  EventPublisher --> MessageSent : "Genera evento"
  EventPublisher --> MessageRead : "Genera evento"
  EventPublisher --> MessageEventListener : "Notifica a los subscriptores"
  MessageEventListener --> MessageStorage : "Guarda Mensaje"
  MessageEventListener --> NotificationService : "Envía Notificación"
  MessagingService --> IMessageFactory : "Fabrica de Mensajes"
  IMessageFactory <|-- TextMessageFactory
  IMessageFactory <|-- ImageMessageFactory
  IMessageFactory <|-- VideoMessageFactory
  IMessageFactory <|-- AudioMessageFactory
  MessagingService --> AuthService : "Autenticación y Cifrado"
  MessageEventListener --> MessagingService : "Mensaje leído"
  MessageStorage --> MessageStatus : "Actualiza Estado"
  MessagingService --> FileStorageService : "Almacena archivos multimedia"
}

package "Dependencias" {
  class "UserService" {
    +getUserProfile(userId)
  }

  class "JobService" {
    +getJobDetails(jobId)
  }

  class "MatchService" {
    +matchWorkerToJob(userId, jobId)
  }

  MessagingService --> UserService : "Consulta Perfil"
  MessagingService --> JobService : "Consulta Detalles del Trabajo"
  MessagingService --> MatchService : "Inicia Conversación"
}

@enduml